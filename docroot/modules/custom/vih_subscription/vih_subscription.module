<?php

/**
 * Implements hook_form_alter()
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function vih_subscription_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_vih_course_period_form') {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'vih_subscription_course_period_form_submit';
      }
    }
  }
//Adding reset filters button to orders views.
  $order_views = ['views-exposed-form-vih-period-class-order-lists-page-all-periods-and-lc-orders',
    'views-exposed-form-vih-event-order-lists-page-all-events-and-events-orders',
    'views-exposed-form-vih-cource-long-order-lists-page-all-lc-and-lc-orders',
    'views-exposed-form-vih-cource-long-order-periods-lists-page-all-lc-periods-and-lc-orders',
    'views-exposed-form-vih-cource-short-order-lists-page-all-sc-and-sc-orders'];
  if(in_array($form['#id'], $order_views)){
  $form['actions']['reset_filters'] = [
  '#title' => 'Reset filters',
  '#type' => 'link',
  '#url' => Drupal\Core\Url::fromRoute(\Drupal::routeMatch()->getRouteName()),
  '#attributes' => [
    'class' => 'button',
    ],
  ];
  }
}

function vih_subscription_course_period_form_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $new_course_link = \Drupal::l(t('new course'), \Drupal\Core\Url::fromRoute('node.add', array('node_type' => 'vih_long_cource')));
  $new_course_period_link = \Drupal::l(t('new course period'), \Drupal\Core\Url::fromRoute('node.add', array('node_type' => 'vih_course_period')));
  drupal_set_message(t('Would you like to create a @course_link or @course_period_link now?', array(
    '@course_link' => $new_course_link,
    '@course_period_link' => $new_course_period_link
  )));

  $form_state->setRedirect('system.admin_content');
}

function vih_subscription_theme() {
  return [
    'vih_subscription_long_course_order_form' => array(
      'render element' => 'form',
    ),
    'vih_subscription_class_selection_radios' => array(
      'render element' => 'radios',
    ),
    'vih_subscription_short_course_order_form' => array(
      'render element' => 'form',
    ),
    'vih_subscription_event_order_form' => array(
      'render element' => 'form',
    ),
    'vih_subscription_confirmation_page' => array(
      'render element' => 'page',
    ),
    'vih_subscription_thank_you_page' => array(
      'render element' => 'page',
    ),
    'vih_subscription_cancelled_page' => array(
      'render element' => 'page',
    ),
    'vih_subscription_error_page' => array(
      'render element' => 'page',
    ),
    'vih_subscription_added_participant' => array(
      'render element' => 'container',
    )
  ];
}

function vih_subscription_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &$breadcrumb, \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context) {
  if (!empty($breadcrumb)) {
    $customLinks = array();

    //node/xx page
    if ($node = $route_match->getParameter('node')) {
      if ($node->getType() == 'vih_long_cource') {
        $customLinks[] = \Drupal\Core\Link::fromTextAndUrl(t('Long courses'), \Drupal\Core\Url::fromUri('internal:/lange-hoejskolekurser'));
      } elseif ($node->getType() == 'vih_short_course') {
        $customLinks[] = \Drupal\Core\Link::fromTextAndUrl(t('Short courses'), \Drupal\Core\Url::fromUri('internal:/kortekurser'));
      } elseif ($node->getType() == 'event') {
        $customLinks[] = \Drupal\Core\Link::fromTextAndUrl(t('Events'), \Drupal\Core\Url::fromUri('internal:/kalender'));
      }
    }

    //course/event creation page
    if ($route_match->getRouteName() == 'vih_subscription.long_course_order_create') {
      $course = $route_match->getParameter('course');
      $customLinks[] = \Drupal\Core\Link::fromTextAndUrl(t('Long courses'), \Drupal\Core\Url::fromUri('internal:/lange-hoejskolekurser'));
      $customLinks[] = $course->toLink();
    } elseif ($route_match->getRouteName() == 'vih_subscription.short_course_order_create') {
      $course = $route_match->getParameter('course');
      $customLinks[] = \Drupal\Core\Link::fromTextAndUrl(t('Short courses'), \Drupal\Core\Url::fromUri('internal:/kortekurser'));
      $customLinks[] = $course->toLink();
    } elseif ($route_match->getRouteName() == 'vih_subscription.event_order_create') {
      $course = $route_match->getParameter('event');
      $customLinks[] = \Drupal\Core\Link::fromTextAndUrl(t('Events'), \Drupal\Core\Url::fromUri('internal:/kalender'));
      $customLinks[] = $course->toLink();
    }

    //course/event confirmation page
    if ($route_match->getRouteName() == 'vih_subscription.subscription_confirmation_redirect') {
      $subject = $route_match->getParameter('subject');
      $order = $route_match->getParameter('order');
      $checksum = $route_match->getParameter('checksum');

      if ($subject->getType() == 'vih_long_cource') {
        $customLinks[] = \Drupal\Core\Link::fromTextAndUrl(t('Long courses'), \Drupal\Core\Url::fromUri('internal:/lange-hoejskolekurser'));
        $customLinks[] = $subject->toLink();

        $customLinks[] = \Drupal\Core\Link::createFromRoute(t('Tilmeld'), 'vih_subscription.long_course_order_create', [
          'course' => $subject->id(),
          'order' => $order->id(),
          'checksum' => $checksum
        ]);

      } elseif ($subject->getType() == 'vih_short_course') {
        $customLinks[] = \Drupal\Core\Link::fromTextAndUrl(t('Short courses'), \Drupal\Core\Url::fromUri('internal:/kortekurser'));
        $customLinks[] = $subject->toLink();
        $customLinks[] = \Drupal\Core\Link::createFromRoute(t('Tilmeld'), 'vih_subscription.short_course_order_create', [
          'course' => $subject->id(),
          'order' => $order->id(),
          'checksum' => $checksum
        ]);
      } elseif ($subject->getType() == 'event') {
        $customLinks[] = \Drupal\Core\Link::fromTextAndUrl(t('Events'), \Drupal\Core\Url::fromUri('internal:/kalender'));
        $customLinks[] = $subject->toLink();
        $customLinks[] = \Drupal\Core\Link::createFromRoute(t('Tilmeld'), 'vih_subscription.event_order_create', [
          'event' => $subject->id(),
          'order' => $order->id(),
          'checksum' => $checksum
        ]);
      }
    }

    //if customLinks is empty, means we didn't have any match
    if (!empty($customLinks)) {
      //old links
      $links = $breadcrumb->getLinks();
      //reusing home link
      $homeLink = $links[0];

      //creating new links object
      $links = array();
      $links[] = $homeLink;
      $links = array_merge($links, $customLinks);

      $breadcrumb = new \Drupal\Core\Breadcrumb\Breadcrumb();
      $breadcrumb->setLinks($links);
    }
  }
}

/**
 * Implements hook_node_view().
 *
 * @param $node
 * @param $view_mode
 * @param $langcode
 */
function vih_subscription_node_view(&$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  global $user;
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

  // In case the translation is missing, trigger 404, skipping orders are they always exist only in one lang.
  $bundle = $entity->bundle();
  if ($bundle !== 'vih_long_course_order' && $bundle !== 'vih_short_course_order' &&  $bundle !== 'vih_event_order') {
    if (!$entity->hasTranslation($language)) {
      throw new \Symfony\Component\HttpKernel\Exception\NotFoundHttpException();
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 */
function vih_subscription_node_presave(Drupal\Core\Entity\EntityInterface $entity) {

  if ($entity->type->entity->id() == 'vih_long_cource') {
    $periods = $entity->get('field_vih_course_periods')->referencedEntities();

    if (is_array($periods)) {
      foreach ($periods as $period) {
        $start_date_arr[] = $period->get('field_vih_cp_start_date')->getValue()[0]['value'];
        $end_date_arr[] = $period->get('field_vih_cp_end_date')->getValue()[0]['value'];
      }
    }
    sort($start_date_arr);
    rsort($end_date_arr);
    
    $course_start_date = array_shift($start_date_arr);
    $course_end_date = array_shift($end_date_arr);

    if(empty($entity->get('field_vih_lc_start_date')->getValue()) or $entity->get('field_vih_lc_start_date')->getValue()[0]['value'] <> $course_start_date){
      $entity->set('field_vih_lc_start_date', $course_start_date);
    }
    if(empty($entity->get('field_vih_lc_end_date')->getValue()) or $entity->get('field_vih_lc_end_date')->getValue()[0]['value'] <> $course_start_date){
      $entity->set('field_vih_lc_end_date', $course_end_date);
    }
  }
}

/**
 * Implements hook_entity_update().
 *
 */
function vih_subscription_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  if (!empty($entity->type->entity) and $entity->type->entity->id() == 'vih_course_period') {

    $nids = \Drupal::entityQuery('node')->condition('type', 'vih_long_cource')->condition('field_vih_course_periods', $entity->id())->execute();
    $long_courses = \Drupal\node\Entity\Node::loadMultiple($nids);

    if (is_array($long_courses)) {
      foreach ($long_courses as $long_course) {
        $long_course->save();
      }
    }
  }
}
