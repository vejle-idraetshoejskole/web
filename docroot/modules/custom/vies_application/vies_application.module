<?php

/**
 * @file
 * Contains vies_application.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Element;
use Drupal\vih_subscription\Form\SubscriptionsGeneralSettingsForm;
use Drupal\node\Entity\Node;

/**
 * Implements hook_help().
 */
function vies_application_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the vies_application module.
    case 'help.page.vies_application':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('VIES Students application') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function vies_application_theme() {
  return [
    'vies_application_form' => [
      'render element' => 'form',
    ],
    'vies_application_periods' => [
      'render element' => 'form',
    ],
    'vies_application_personal_data' => [
      'render element' => 'form',
    ],
    'vies_application_section' => [
      'render element' => 'form',
    ],
    'vies_application_questions' => [
      'render element' => 'form',
    ],
    'vies_application_submit_message' => [
      'variables' => [
        'title' => NULL,
        'message' => NULL,
        'backlink' => NULL,
      ],
    ],
    'vies_added_parents' => [
      'render element' => 'container',
    ],
  ];
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function vies_application_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#entity_type'] == 'taxonomy_term'
    && $entity_form['#bundle'] == 'questions') {
    $entity_form['#attributes']['class'] = ['questions-inline-form'];
    $entity_form['field_vies_question_type']['widget']['#attributes']['class'] = ['questions-inline-form-type'];
    $entity_form['#attached']['library'][] = 'vies_application/vies-application';
  }
}

/**
 * Implements hook_form_alter().
 */
function vies_application_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if (in_array($form['#form_id'], [
        'node_vies_application_form_edit_form',
        'node_vies_application_form_form',
      ])) {
    foreach ([
  'field_vies_about_school',
  'field_vies_afterschool',
  'field_vies_class_questions',
    ] as $field) {
      if (empty($form[$field]['widget']['entities'])) {
        continue;
      }
      $entities = &$form[$field]['widget']['entities'];
      foreach (Element::children($entities) as $key) {
        if (!empty($entities[$key]['#entity']->field_question->value)) {
          $entities[$key]['#label'] = $entities[$key]['#entity']->field_question->value;
        }
      }
    }
    if (!empty($form['field_vies_parents']['widget']['entities'])) {
      $entities = &$form['field_vies_parents']['widget']['entities'];
      foreach (Element::children($entities) as $key) {
        $label = $entities[$key]['#entity']->field_parent_type->value . ': ';
        $label .= $entities[$key]['#entity']->field_parent_first_name->value . ' ';
        $label .= $entities[$key]['#entity']->field_parent_last_name->value;
        $entities[$key]['#label'] = $label;
      }
    }

    // Getting application node.
    $applicationNode = $form_state->getFormObject()->getEntity();
    if (isset($applicationNode->field_vies_class->entity)) {
      // Getting class referenced labels.
      $classTerm = $applicationNode->field_vies_class->entity;

      $referencedLabels = array();

      if ($classTerm->field_vies_valuation_labels) {
        foreach ($classTerm->field_vies_valuation_labels->getValue() as $reference) {
          $referencedLabels[] = $reference['target_id'];
        }
      }

      // Limiting the labels choice.
      foreach (array_keys($form['field_vies_label']['widget']['#options']) as $key) {
        if (!in_array($key, $referencedLabels)) {
          unset($form['field_vies_label']['widget']['#options'][$key]);
        }
      }
    }
  }
}
