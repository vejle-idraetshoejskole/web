<?php
/**
 * @file
 * Bellcom common module.
 *
 * Module contains common functionality.
 */

/**
 * Implements hook_field_widget_form_alter().
 */
function vih_subscription_field_widget_form_alter(&$element, $form_state, $context) {
  if (!empty($element['uri']['#type'])
    && $element['uri']['#type'] == 'entity_autocomplete'
    && in_array('field_vih_banner_slides', $element['#field_parents'])) {
    $element['uri']['#type'] = 'linkit';
    $element['uri']['#autocomplete_route_name'] = 'linkit.autocomplete';
    $element['uri']['#autocomplete_route_parameters'] = ['linkit_profile_id' => 'internal'];
  }
}

/**
 * Implement hook_block_view_alter().
 *
 * Hides block content depending on the expire date field value.
 */
function bellcom_common_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  $uuid = $block->getDerivativeId();
  if ($uuid) {
    $block_content = \Drupal::service('entity.repository')->loadEntityByUuid('block_content', $uuid);
    if ($block_content) {
      $expire_date = $block_content->field_vih_block_expire_date->value;

      if ($expire_date && strtotime($expire_date) < time()) {
        $build = array();
      }
    }
  }
}

/**
 * Implements hook_pathologic_alter().
 *
 * Adds a language prefix to the links.
 */
function bellcom_common_pathologic_alter(&$url_params, $parts, $settings) {
  if ($url_params['options']['language']) {
    $url_params['path'] = $url_params['options']['language']->getId() . '/' . $url_params['path'];
  }
}

/**
 * Implements hook_entity_presave().
 *
 * Create a translation for media entity if it does not exist.
 */
function bellcom_common_media_presave(Drupal\Core\Entity\EntityInterface $entity) {
  foreach ($entity->bundle->referencedEntities() as $bundle) {
    if ($bundle->id() === 'image' and strpos($_SERVER['SERVER_NAME'], 'vies') === FALSE) {
      if ($entity && !$entity->hasTranslation('en')) {
        $entity->addTranslation('en', ['name' => $entity->name, 'image' => $entity->image]);
      }
      break;
    }
  }
}

/**
 * Implement hook_breadcrumba_alter().
 */
function bellcom_common_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &$breadcrumb, \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context) {
  if (!empty($breadcrumb)) {
    $links = $breadcrumb->getLinks();

    //user/xx page
    if ($user = $route_match->getParameter('user')) {
      $request = \Drupal::request();
      $route_match = \Drupal::routeMatch();
      $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

      $firstName = $user->field_vih_user_name_first->value;
      $lastName = $user->field_vih_user_name_last->value;

      if ($firstName && $lastName) {
        $page_title = $firstName . ' ' . $lastName;
      }

      $links[] = \Drupal\Core\Link::createFromRoute($page_title, '<none>');
    }
    else {
      $request = \Drupal::request();
      $route_match = \Drupal::routeMatch();
      $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
      $links[] = \Drupal\Core\Link::createFromRoute($page_title, '<none>');
    }

    $breadcrumb = new \Drupal\Core\Breadcrumb\Breadcrumb();
    $breadcrumb->setLinks($links);
  }
}

function bellcom_common_preprocess_breadcrumb(&$variables){
  $breadcrumb = &$variables['breadcrumb'];

  // Making last item active.
  $breadcrumb[count($breadcrumb)-1]['attributes'] = new \Drupal\Core\Template\Attribute(['class' => ['active']]);

  // Making breadcrumbs not being cached.
  $variables['#cache']['contexts'][] = 'url';
}

/**
 * Implements hook_translation_insert().
 *
 * Makes paragraphs status not published when translation created.
 */
function bellcom_common_entity_translation_insert(\Drupal\Core\Entity\EntityInterface $translation) {
  if ($translation->getEntityTypeId() == 'taxonomy_term'){
    $paragraphs  = $translation->field_vih_paragraphs->getValue();
    foreach ($paragraphs as $element) {
      $paragraphs_entity = \Drupal\paragraphs\Entity\Paragraph::load( $element['target_id'] );
      if ($paragraphs_entity->hasTranslation('en')) {
        $paragraphs_entity = $paragraphs_entity->getTranslation('en');
        $paragraphs_entity->set('status', 0);
        $paragraphs_entity->save();
      }
    }
  }
}
