<?php
include( dirname(__FILE__) . '/include/settings.inc');

use Drupal\image\Entity\ImageStyle;
use Drupal\user\Entity\User;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function site_preprocess_html(&$variables) {
  if (_detect_site() === 'vies') {
    $variables['#attached']['library'][] =  'site/styles_vies';
    $variables['attributes']['class'][] = 'is-vies';
  } else {
    $variables['#attached']['library'][] =  'site/styles_vih';
    $variables['attributes']['class'][] = 'is-vih';
  }

  $variables['language'] = \Drupal::languageManager()->getCurrentLanguage()->getId();
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function site_preprocess_page(array &$variables) {
  $banner_entity = isset($variables['node']) ? $variables['node'] : NULL;
  if ($uid = \Drupal::routeMatch()->getRawParameter('user')) {
    $banner_entity = User::load($uid);
  }
  if ($tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $banner_entity = \Drupal\taxonomy\Entity\Term::load($tid);
  }

  $route = \Drupal::routeMatch()->getRouteName();
  if ($route == 'vies_valuation') {
    $banner_entity = NULL;
  }

  $banner = [];
  if (isset($banner_entity->field_vih_top_banner) && !empty($banner_entity->field_vih_top_banner->getValue())) {
    // Retrieve the translated entity in current language with fallback to default language if translation not exists.
    $banner_entity = \Drupal::service('entity.repository')->getTranslationFromContext($banner_entity, \Drupal::languageManager()->getCurrentLanguage()->getId());
    $references = $banner_entity->field_vih_top_banner->referencedEntities();
    $banner['#background_image'] = reset($references);
    $banner['#title'] = $variables['page']['#title'];
    if (!empty($banner_entity->field_vih_top_banner_text->getValue())) {
      $banner['#title'] = $banner_entity->field_vih_top_banner_text->getValue()[0]['value'];
    }
  }

  if (!empty($banner)) {
    $banner['#theme'] = 'header_banner';
    $variables['header_banner'] = $banner;
  }

  // Pass which site we are on - for use with ex. logo display.
  $variables['activated_site'] = _detect_site();

  // Theme settings.
  $variables['theme_settings']['copyright_interval'] = '';
  $variables['theme_settings'] = _site_collect_theme_settings();
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function site_theme_suggestions_page_alter(
  array &$suggestions,
  array $variables
) {

  $node = \Drupal::request()->attributes->get('node');
  if ($node) {
    if ($node->getType()) {
      $suggestions[] = 'page__' . $node->getType();
    }

    if ($node->hasField('field_page_template')) {
      $custom_page_template = $node->get('field_page_template')->getValue();
      if (isset($custom_page_template[0]['target_id'])) {
        $term = \Drupal\taxonomy\Entity\Term::load($custom_page_template[0]['target_id'])
          ->getname();
        $term = 'page__' . preg_replace("/[^a-zA-Z0-9s]/", "_", strtolower($term));
        $suggestions[] = $term;
      }
    }

    //alternative front page template suggestion, which has higher priority than page__node-type
    $is_front = \Drupal::service('path.matcher')->isFrontPage();
    if ($is_front == TRUE) {
      $suggestions[] = 'page__' . $node->getType() . '__front';
    }
  }

  $term = \Drupal::request()->attributes->get('taxonomy_term');
  if ($term) {
    if ($term->getVocabularyId()) {
      $suggestions[] = 'page__taxonomy__term__' . $term->getVocabularyId();
    }
  }
}

function site_theme_suggestions_taxonomy_term_alter(
  &$suggestions,
  $variables,
  $hook
) {
  $suggestions[] = 'taxonomy_term__' . $variables['elements']['#taxonomy_term']->getVocabularyId() . '__' . $variables['elements']['#view_mode'];
  $suggestions[] = 'taxonomy_term__' . $variables['elements']['#view_mode'];
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function site_preprocess_block(array &$variables) {
  $variables['content']['#attributes']['block'] = $variables['attributes']['id'];
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function site_theme_suggestions_field_alter(
  array &$suggestions,
  array $variables

) {
  $element = $variables['element'];

  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];
  $suggestions[] = 'field__' . $element['#entity_type'] . '__' . $element['#view_mode'] . '__' . $element['#field_name'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function site_theme_suggestions_menu_alter(array &$suggestions, array $variables) {

  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(['block-', '-'], [
      '',
      '_',
    ], $variables['attributes']['block']);

    // menu__MENU_NAME__BLOCK_NAME
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function site_theme_suggestions_block_alter(array &$suggestions, array $variables) {

  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

function site_theme_suggestions_file_link_alter(&$suggestions, $vars, $hook) {
  $suggestions[] = 'file_link__' . 'type__' . 'page';
}

/**
 * Implements hook_preprocess_node().
 */
function site_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
  $node = $variables['node'];

  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['language'] = $language;
  // Event
  if ($node->getType() == 'event') {
    $variables['content']['can_be_subscribed'] = \Drupal\vih_subscription\Misc\VihSubscriptionUtils::acceptsMoreSubscriptions($node);
    $variables['content']['is_outdated'] = \Drupal\vih_subscription\Misc\VihSubscriptionUtils::isOutdated($node);
    $variables['content']['is_active'] = ($node->field_vih_event_status->value == 'active');
    $variables['content']['is_closed'] = ($node->field_vih_event_status->value == 'closed');

    if($node->field_vih_event_start_date->date->format('Y-m-d') == $node->field_vih_event_end_date->date->format('Y-m-d')){
      $start_date_str = $node->field_vih_event_start_date->date->format('d. M Y') . ' ' . $node->field_vih_event_start_date->date->format('H:i');
      $end_date_str = $node->field_vih_event_end_date->date->format('H:i');
      $one_day = TRUE;
    } else {
      $start_date_str = $node->field_vih_event_start_date->date->format('d. M Y H:i');
      $end_date_str = $node->field_vih_event_end_date->date->format('d. M Y H:i');
      $one_day = FALSE;
    }
    $variables['content']['start_date_str'] = $start_date_str;
    $variables['content']['end_date_str'] = $end_date_str;
    $variables['content']['one_day'] = $one_day;
  }

  // Orders
  elseif (in_array($node->getType(), ['vih_short_course_order', 'vih_long_course_order', 'vih_event_order', 'vies_application_form'])) {
    if(!in_array($variables['view_mode'], ['teaser','email_teaser'])){
      if(!$variables['user']->hasPermission('access content overview')){
        throw new AccessDeniedHttpException();
      }
    }
  }

  // Short course
  elseif ($node->getType() == 'vih_short_course') {
    $variables['content']['can_be_subscribed'] = \Drupal\vih_subscription\Misc\VihSubscriptionUtils::acceptsMoreSubscriptions($node);
    $variables['content']['is_outdated'] = \Drupal\vih_subscription\Misc\VihSubscriptionUtils::isOutdated($node);
    $variables['content']['is_active'] = ($node->field_vih_sc_status->value == 'active');
    $variables['content']['is_closed'] = ($node->field_vih_sc_status->value == 'closed');

    foreach ($node->field_vih_sc_option_groups->referencedEntities() as $optionGroupDelta => $optionGroup) {
      if ($optionGroup->field_vih_og_is_main_price->value) {
        $variables['content']['main_price_index'] = $optionGroupDelta;
      }

      $allOptionsSold = TRUE;
      foreach ($optionGroup->field_vih_og_options->referencedEntities() as $optionDelta => $option) {
        $stockAmount = $option->field_vih_option_stock_amount->value;

        if (isset($stockAmount)) {
          $optionCurrentUsageCount = \Drupal\vih_subscription\Misc\VihSubscriptionUtils::calculateOptionUsageCount($node, $optionGroup, $option);
          $remainingAmount = $stockAmount - $optionCurrentUsageCount;

          // Saving old option to use in the template.
          if ($remainingAmount <= 0) {
            $variables['content']['sold_options'][$optionGroupDelta][$optionDelta] = 1;
          } else {
            $allOptionsSold = FALSE;
          }
        } else {
          $allOptionsSold = FALSE;
        }
      }

      // If all options in a group is sold, mark option group as sold as well.
      if ($allOptionsSold) {
        $variables['content']['sold_optionsGroups'][$optionGroupDelta] = 1;
      }
    }
  }

  // Long course
  elseif ($node->getType() == 'vih_long_cource') {
    $variables['content']['can_be_subscribed'] = \Drupal\vih_subscription\Misc\VihSubscriptionUtils::acceptsMoreSubscriptions($node);
    $variables['content']['is_outdated'] = \Drupal\vih_subscription\Misc\VihSubscriptionUtils::isOutdated($node);
    $variables['content']['is_active'] = ($node->field_vih_course_status->value == 'active');
    $variables['content']['is_closed'] = ($node->field_vih_course_status->value == 'closed');

    $config = \Drupal::config(\Drupal\vih_subscription\Form\SubscriptionsGeneralSettingsForm::$configName);
    if (!empty($enquire_price_page_international = $config->get('vih_subscription_long_course_subscription_enquire_price_page_international'))) {
      $variables['content']['enquire_prices_page_international'] = $enquire_price_page_international;
    }

    //preloading travel classes
    $course_travel_price = 0;
    $quantity = 1;

    $start_course_date = $node->field_vih_lc_start_date;
    $end_course_date = $node->field_vih_lc_end_date;

    foreach ($node->field_vih_course_periods->referencedEntities() as $period) {
      $period = \Drupal::service('entity.repository')->getTranslationFromContext($period);

      //only for full display
      if ($variables['view_mode'] == 'full') {
        $variables['content']['periods'][$period->id()] = array(
          'title' => $period->getTitle(),
          'period_id' => $period->id(),
        );

        foreach ($period->field_vih_cp_course_slots->referencedEntities() as $slot) {
          $slot = \Drupal::service('entity.repository')->getTranslationFromContext($slot);

          $travel = array_pop($slot->field_vih_cs_travel->getValue()[0]);
          $mandatory = array_pop($slot->field_vih_cs_mandatory->getValue()[0]);

          foreach ($slot->field_vih_cs_classes->referencedEntities() as $class) {
            foreach ($class->field_vih_class_class_packages->referencedEntities() as $class_package) {
              $class_package = \Drupal::service('entity.repository')->getTranslationFromContext($class_package);

              // For the list
              if (!isset($variables['content']['classes_packages']) || empty($variables['content']['classes_packages'][$class_package->id()])) {
                $variables['content']['classes_packages'][$class_package->id()] = [
                  'period_id' => $period->id(),
                  'id' => $class_package->id(),
                  'weight' => $class_package->getWeight(),
                  'name' => $class_package->getName(),
                  'term' => \Drupal::entityTypeManager()
                    ->getViewBuilder('taxonomy_term')
                    ->view($class_package, 'vih_class_package_accordion'),
                ];
                // Sorting array by taxonomy weights
                uasort($variables['content']['classes_packages'], function($a, $b) {
                  if ($a['weight'] == $b['weight']) {
                    return strcasecmp($a['name'], $b['name']);
                  }
                  return ($a['weight'] < $b['weight']) ? -1 : 1;
                });
              }

              // For listing inside modal
              if (!isset($variables['content']['periods'][$period->id()]['classes_packages']) || empty($variables['content']['periods'][$period->id()]['classes_packages'][$class_package->id()])) {
                $variables['content']['periods'][$period->id()]['classes_packages'][$class_package->id()] = [
                  'period_id' => $period->id(),
                  'id' => $class_package->id(),
                  'name' => $class_package->getName(),
                  'term' => array()
                ];
              }

              if ($slot->field_vih_cs_title->value) {
                $variables['content']['periods'][$period->id()]['classes_packages'][$class_package->id()]['term']['#slots'][$slot->id()]['name'] = $slot->field_vih_cs_title->value;
              }

              $variables['content']['periods'][$period->id()]['classes_packages'][$class_package->id()]['term']['#slots'][$slot->id()]['classes'][$class->id()] = \Drupal::entityTypeManager()
                ->getViewBuilder('taxonomy_term')
                ->view($class, 'list_advanced');
            }

            if ($travel) {
              if ($mandatory) {
                $variables['content']['travel_classes_mandatory'][$class->id()][] = \Drupal::entityTypeManager()
                  ->getViewBuilder('taxonomy_term')
                  ->view($class, 'vih_teaser_modal');
                $course_travel_price += $class->field_vih_class_price_addition->value;
              } else {
                $variables['content']['travel_classes_optional'][$class->id()][] = \Drupal::entityTypeManager()
                  ->getViewBuilder('taxonomy_term')
                  ->view($class, 'vih_teaser_modal');
              }
            }
          }
        }
      }
      elseif (in_array($variables['view_mode'], ['price', 'price_with_details'])) {
        $extra_options = [];
        foreach ($period->field_vih_cp_course_slots->referencedEntities() as $slot) {
          $slot = \Drupal::service('entity.repository')->getTranslationFromContext($slot);

          $travel = array_pop($slot->field_vih_cs_travel->getValue()[0]);
          $mandatory = array_pop($slot->field_vih_cs_mandatory->getValue()[0]);
          $options = [];
          foreach ($slot->field_vih_cs_classes->referencedEntities() as $class) {
            // Count classes only with additional price.
            if (empty($class->field_vih_class_price_addition->value)) {
              continue;
            }

            if ($travel && $mandatory) {
              $course_travel_price += $class->field_vih_class_price_addition->value;
              continue;
            }

            // Show optional only classes.
            $options[] = [
              'title' => $class->label(),
              'price' => $class->field_vih_class_price_addition->value,
            ];
          }

          if (!empty($options)) {
            $extra_options[] = [
              'title' => $slot->field_vih_cs_title->value,
              'options' => $options,
            ];
          }
        }

        if (!empty($node->field_vih_lc_weeks_quantity->value)) {
          $quantity = $node->field_vih_lc_weeks_quantity->value;
        }

        $variables['content']['course_title'] = $node->title->value;

        $variables['content']['extra_options'][$period->id()] = $extra_options;

        if (!empty($node->field_vih_lc_discount_amount->value)) {
          $variables['content']['discount_amount'] = $node->field_vih_lc_discount_amount->value;
        }
        if (!empty($node->field_vih_lc_discount_label->value)) {
          $variables['content']['discount_label'] = $node->field_vih_lc_discount_label->value;
        }
      }
    }

    // Setting total price.
    $variables['content']['total_price'] = $quantity * $node->field_vih_course_week_price->value
      + $node->field_vih_course_subsc_price->value
      + $node->field_vih_course_price->value
      + $course_travel_price;

    if (!empty($variables['content']['discount_amount'])) {
      $variables['content']['final_price'] = $variables['content']['total_price'] - $variables['content']['discount_amount'];
    }

    // Setting travel price.
    $variables['content']['travel_price'] = $course_travel_price;

    if (!empty($start_course_date->date)) {
      $variables['content']['course_period_start'] = $start_course_date->date->getTimestamp();
    }

    if (!empty($end_course_date->date)) {
      $variables['content']['course_period_end'] = $end_course_date->date->getTimestamp();
    }
  } elseif ($node->getType() === 'vih_course_period') {
    foreach ($node->field_vih_cp_course_slots->referencedEntities() as $slot) {
      $slot = \Drupal::service('entity.repository')->getTranslationFromContext($slot);
      $variables['content']['#course_slots'][$slot->id()] = [
        'id' => $slot->id(),
        'name' => $slot->field_vih_cs_title->value
      ];
    }
  }
}

/*
 * Implements hook_preprocess_paragraph().
 */
function site_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];

  // Default
  if ($variables['view_mode'] === 'default') {
    // Paragraphs which are embedded inside other paragraphs
    $embedded_paragraphs = [
      'vih_single_class_group',
    ];

    // Skewed background
    if (! in_array($paragraph->getType(), $embedded_paragraphs)) {
      $variables['attributes']['class'][] = 'sectioned--skewed';

      // Background image
      if ($paragraph->field_vih_background_img && !$paragraph->field_vih_background_img->isEmpty()) {
        $image_uri = $paragraph->field_vih_background_img->entity->image->entity->getFileUri();
        $image_style = ImageStyle::load('paragraph_background_image');
        $image_url = $image_style->buildUrl($image_uri);

        $variables['attributes']['class'][] = 'sectioned--skewed--background-image';

        $variables['background_image'] = $image_url;
      }

      // Background color
      elseif ($paragraph->field_vih_background_color && !$paragraph->field_vih_background_color->isEmpty()) {
        $background_color = $paragraph->field_vih_background_color->getValue();

        $variables['attributes']['class'][] = 'sectioned--skewed--background-color';
        $variables['attributes']['class'][] = 'sectioned--skewed--background-color-' . $background_color[0]['value'];
      }

      // Provide a default background color
      else {
        $variables['attributes']['class'][] = 'sectioned--skewed--background-color';
        $variables['attributes']['class'][] = 'sectioned--skewed--background-color-white';
      }
    }
  } elseif ($variables['paragraph']->getType() == 'vih_ordered_course_period' and in_array($variables['view_mode'], array('email_teaser', 'embedded'))) {
    foreach($variables['paragraph']->field_vih_ocp_order_course_slots->referencedEntities() as $key_order_course_slot => $value_order_course_slot){
      if( stripos($value_order_course_slot->field_vih_ocs_title->getValue()[0]['value'], '- mandatory' )){
        unset($variables['content']['field_vih_ocp_order_course_slots'][$key_order_course_slot]);
      }
    }
  }
}

/**
 * Implements hook_preprocess_hook().
 * For banner slide.
 */
function site_preprocess_paragraph__vih_banner_slide(&$variables) {
  $paragraph = $variables['paragraph'];
}

/**
 * Implements hook_preprocess_hook().
 */
function site_preprocess_paragraph__list_of_news_teasers(&$variables) {
  $paragraph = $variables['paragraph'];
  $ids = [];

  if ($fields = $paragraph->get('field_vih_tags')->getValue()) {

    foreach($fields as $field) {
      $ids[] = $field['target_id'];
    }

    $contextual_filter = implode('+', $ids);

    if (!empty(views_get_view_result('vih_news_teaser', 'embedded_list', $contextual_filter))) {

      // Result not empty, unsetting the empty message.
      unset($variables['content']['field_vih_empty_message']);

      $variables['content']['embedded_view'] = views_embed_view('vih_news_teaser', 'embedded_list', $contextual_filter);
    }
  }
  else {
    if (!empty(views_get_view_result('vih_news_teaser', 'embedded_list'))) {

      // Result not empty, unsetting the empty message.
      unset($variables['content']['field_vih_empty_message']);

      $variables['content']['embedded_view'] = views_embed_view('vih_news_teaser', 'embedded_list');
    }
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function site_preprocess_paragraph__vih_list_of_news_list_advanced(&$variables) {
  $paragraph = $variables['paragraph'];
  $ids = [];

  if ($fields = $paragraph->get('field_vih_tags')->getValue()) {

    foreach($fields as $field) {
      $ids[] = $field['target_id'];
    }

    $contextual_filter = implode('+', $ids);

    if (!empty(views_get_view_result('vih_news_list_advanced', 'embedded_list', $contextual_filter))) {

      // Result not empty, unsetting the empty message.
      unset($variables['content']['field_vih_empty_message']);

      $variables['content']['embedded_view'] = views_embed_view('vih_news_list_advanced', 'embedded_list', $contextual_filter);
    }
  }
  else {
    if (!empty(views_get_view_result('vih_news_list_advanced', 'embedded_list'))) {

      // Result not empty, unsetting the empty message.
      unset($variables['content']['field_vih_empty_message']);

      $variables['content']['embedded_view'] = views_embed_view('vih_news_list_advanced', 'embedded_list');
    }
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function site_preprocess_paragraph__vih_contact_person(&$variables) {
  $paragraph = $variables['paragraph'];
  $teacher_uids = [];

  if ($fields = $paragraph->get('field_vih_user')->getValue()) {

    foreach($fields as $field) {
      $teacher_uids[] = $field['target_id'];
    }
  }

  if (count($teacher_uids)) {
    $variables['content']['#teacher'] = User::load($teacher_uids[0]);
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function site_preprocess_paragraph__employee(&$variables) {
  $paragraph = $variables['paragraph'];
  $ids = [];

  if ($fields = $paragraph->get('field_vih_user_type_id')->getValue()) {

    foreach($fields as $field) {
      $ids[] = $field['target_id'];
    }

    $contextual_filter = implode('+', $ids);

    $variables['content']['embedded_view'] = views_embed_view('vih_employees', 'embed_teaser', $contextual_filter);
  }
  else {
    $variables['content']['embedded_view'] = views_embed_view('vih_employees', 'embed_teaser');
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function site_preprocess_paragraph__short_course_list_(&$variables) {
  $paragraph = $variables['paragraph'];
  $ids = [];

  if ($fields = $paragraph->get('field_vih_course_id')->getValue()) {

    foreach($fields as $field) {
      $ids[] = $field['target_id'];
    }

    $contextual_filter = implode('+', $ids);

    if (!empty(views_get_view_result('vih_short_courses', 'embed_list_advanced', $contextual_filter))) {
      // Result not empty, unsetting the empty message.
      unset($variables['content']['field_vih_empty_message']);
      $variables['content']['embedded_view'] = views_embed_view('vih_short_courses', 'embed_list_advanced', $contextual_filter);
    }
  }

  // Display another display on the view
  else {
    if (!empty(views_get_view_result('vih_short_courses', 'embed_list_advanced_future'))) {
      // Result not empty, unsetting the empty message.
      unset($variables['content']['field_vih_empty_message']);
      $variables['content']['embedded_view'] = views_embed_view('vih_short_courses', 'embed_list_advanced_future');
    }
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function site_preprocess_paragraph__long_course_list_(&$variables) {
  $paragraph = $variables['paragraph'];
  $ids = [];
  if ($fields = $paragraph->get('field_vih_course_id')->getValue()) {

    foreach($fields as $field) {
      $ids[] = $field['target_id'];
    }

    $contextual_filter = implode('+', $ids);

    if (!empty(views_get_view_result('vih_long_courses', 'embed_list_advanced', $contextual_filter))) {
      // Result not empty, unsetting the empty message.
      unset($variables['content']['field_vih_empty_message']);
      $variables['content']['embedded_view'] = views_embed_view('vih_long_courses', 'embed_list_advanced', $contextual_filter);
    }
  }

  // Display another display on the view
  else {
    if (!empty(views_get_view_result('vih_long_courses', 'embed_list_advanced_future'))) {
      // Result not empty, unsetting the empty message.
      unset($variables['content']['field_vih_empty_message']);
      $variables['content']['embedded_view'] = views_embed_view('vih_long_courses', 'embed_list_advanced_future');
    }
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function site_preprocess_paragraph__long_course_price(&$variables) {
  $paragraph = $variables['paragraph'];
  if (empty($paragraph->get('field_vih_lc')->getValue())) {
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
    $entity = $variables['paragraph']->getParentEntity();
    $variables['content']['field_vih_lc'] =  $view_builder->view($entity, 'price_with_details');
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function site_preprocess_paragraph__long_course_list_contain_class(&$variables) {
  $taxonomy_term_tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term');
  if (empty($taxonomy_term_tid)) {
    $parent_enitity = $variables['paragraph']->getParentEntity();
    $taxonomy_term_tid = $parent_enitity->id();
  }
  if (!empty(views_get_view_result('vih_long_courses', 'embed_list_advanced_contain_class', $taxonomy_term_tid))) {
    // Result not empty, unsetting the empty message.
    unset($variables['content']['field_vih_empty_message']);
    $variables['content']['embedded_view'] = views_embed_view('vih_long_courses', 'embed_list_advanced_contain_class', $taxonomy_term_tid);
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function site_preprocess_paragraph__event_list(&$variables) {
  $paragraph = $variables['paragraph'];
  $ids = [];

  if ($fields = $paragraph->get('field_vih_event_id')->getValue()) {

    foreach($fields as $field) {
      $ids[] = $field['target_id'];
    }
    $contextual_filter = implode('+', $ids);

    if (!empty(views_get_view_result('vih_events', 'embed_list_advanced', $contextual_filter))) {
      // Result not empty, unsetting the empty message.
      unset($variables['content']['field_vih_empty_message']);
      $variables['content']['embedded_view'] = views_embed_view('vih_events', 'embed_list_advanced', $contextual_filter);
    }
  }

  // Display another display on the view
  else {
    if (!empty(views_get_view_result('vih_events', 'embed_list_advanced_future'))) {
      // Result not empty, unsetting the empty message.
      unset($variables['content']['field_vih_empty_message']);
      $variables['content']['embedded_view'] = views_embed_view('vih_events', 'embed_list_advanced_future');
    }
  }
}

function site_preprocess_paragraph__vih_teacher_class_description(&$variables) {
  $paragraph = $variables['paragraph'];
  $teacher_uids = [];

  if ($fields = $paragraph->get('field_vih_user')->getValue()) {

    foreach($fields as $field) {
      $teacher_uids[] = $field['target_id'];
    }
  }

  if (count($teacher_uids)) {
    $variables['content']['#teacher'] = User::load($teacher_uids[0]);
  }
}

function site_preprocess_paragraph__class_packages(&$variables) {
  $paragraph = $variables['paragraph'];
  $class_tids = [];

  if ($fields = $paragraph->get('field_vih_class_id')->getValue()) {

    foreach($fields as $field) {
      $class_tids[] = $field['target_id'];
    }
  }
  $contextual_filter = implode('+', $class_tids);

  $variables['content']['embedded_view'] = views_embed_view('vih_class_packages', 'embed_teaser', $contextual_filter);
}

function site_preprocess_paragraph__class(&$variables) {
  $classes = $variables['elements']['#paragraph']->getFields()['field_paragraph_class_package']->referencedEntities();
  $paragraph_title = $variables['elements']['#paragraph']->getFields()['field_vih_heading']->value;
  $classes_arr = [];

  foreach ($classes as $class) {
    $classes_arr[] = $class->tid->value;
  }

  $variables['content']['view_header'] = [
    '#markup' => $paragraph_title,
    '#allowed_tags' => ['h2'],
  ];

  $variables['content']['view_output'] = views_embed_view('class_packages_frontpage', 'class_list', implode('+', $classes_arr));
}

function site_preprocess_paragraph__class_package_accordion(&$variables) {

  $class_packages = $variables['elements']['#paragraph']->getFields()['field_paragraph_class_package']->referencedEntities();

  foreach ($class_packages as $key => $class_package) {

    $variables['content']['view_output'][$key]['classes'] = views_embed_view('class_packages_frontpage', 'class_package_list', $class_package->tid->value);
    $variables['content']['view_output'][$key]['package'] = $class_package->name->value;
    //    $class_packages_arr[] = taxonomy_term_view($class_package, 'vih_class_package_accordion');

  }
  //$variables['content']['view_output'] = $class_packages_arr;

}

/**
 * Implements hook_preprocess_hook().
 *
 * Removes the nodes references that do not have the selected language translation.
 */
function site_preprocess_paragraph__vih_content_grid(&$variables) {
  $paragraph = $variables['paragraph'];
  $ids = [];

  if ($fields = $paragraph->get('field_vih_cg_node_ref')->getValue()) {

    foreach($fields as $field) {
      $ids[] = $field['target_id'];
    }

    $contextual_filter = implode('+', $ids);

    if (!empty(views_get_view_result('vih_content_grid', 'embed_teaser', $contextual_filter))) {
      // Result not empty, unsetting the empty message.
      unset($variables['content']['field_vih_empty_message']);
      $variables['content']['embedded_view'] = views_embed_view('vih_content_grid', 'embed_teaser', $contextual_filter);
    }
  }
}

/**
 * Implements hook_preprocess_hook().
 *
 * Removes the nodes references that do not have the selected language translation.
 */
function site_preprocess_paragraph__vih_single_class_group(&$variables) {

  $paragraph = $variables['elements']['#paragraph'];
  $currentLang = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $translated_items = array();
  foreach ($paragraph->field_vih_scg_classes->referencedEntities() as $delta => $refTerm) {
    if ($refTerm->hasTranslation($currentLang)) {
      $translated_items[] = $variables['content']['field_vih_scg_classes'][$delta];
    }
    unset($variables['content']['field_vih_scg_classes'][$delta]);
  }
  foreach($translated_items as $key => $translated_item){
    $variables['content']['field_vih_scg_classes'][$key] = $translated_item;
  }
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function site_theme_suggestions_views_view_alter(
  array &$suggestions,
  array $variables
) {

}

/**
 * Implements hook_preprocess_form().
 */
function site_preprocess_form(array &$variables) {
  $form_id = $variables['attributes']['id'];
}

/**
 * Implements hook_preprocess_select().
 */
function site_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function site_preprocess_field(array &$variables, $hook) {

  switch ($variables['element']['#field_name']) {
    // Unsetting unpublished paragraphs.
    case 'field_vih_paragraphs':
      $currentLang = \Drupal::languageManager()->getCurrentLanguage()->getId();
      foreach($variables['items'] as $delta => $paragraphItem) {
        $paragraph = $paragraphItem['content']['#paragraph'];
        if ($paragraph->hasTranslation($currentLang)) {
          $paragraph = $paragraphItem['content']['#paragraph']->getTranslation($currentLang);
        }

        if (!$paragraph->isPublished()) {
          unset($variables['items'][$delta]);
        }
      }
    break;

    case 'field_vih_lc_add_txt_link':
      if (!empty($variables['items'][0]['content'])) {
        $variables['items'][0]['content']['#attributes']['class'][] = 'btn-success btn';
      }
      break;
  }
}

/**
 * Implements hook_preprocess_details().
 */
function site_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function site_theme_suggestions_details_alter(
  array &$suggestions,
  array $variables
) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function site_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}

function site_preprocess_links__language_block(&$variables) {
  $variables['links']['en']['link']['#title'] = 'En';
  $variables['links']['da']['link']['#title'] = 'Da';
}

/**
 * Implements template_preprocess_taxonomy_term().
 */
function site_preprocess_taxonomy_term(&$variables) {
  $variables['attributes']['class'][] = $variables['view_mode'];
  $variables['attributes']['class'][] = $variables['term']->getVocabularyId();

  //Get classes from class_package
  //  if($variables['term']->getVocabularyId() == 'vih_class_package'){
  //    $view = \Drupal\views\Views::getView('class_packages_frontpage');
  //    $view->setDisplay('class_package_list');
  //    $view->setArguments(array($variables['term']->id()));
  //    $variables['class_list'] = $view->render();
  //  }
}

/**
 * Implements template_preprocess_user().
 */
function site_preprocess_user(&$variables) {
  $user = $variables['user'];
  $view_mode = $variables['elements']['#view_mode'];
  $variables['attributes']['class'][] = 'user';
  $variables['attributes']['class'][] = $variables['elements']['#view_mode'];
  $variables['url'] = $user->toUrl();

  if ($view_mode === 'full') {
    $ids = [];
    $ids[] = $user->id();

    $contextual_filter = implode('+', $ids);

    if (!empty(views_get_view_result('vih_my_classes_nodes', 'embedded_embedded', $contextual_filter))) {
      $variables['content']['view_vih_my_classes_nodes'] = views_embed_view('vih_my_classes_nodes', 'embedded_embedded', $contextual_filter);
    }
    if (!empty(views_get_view_result('vih_my_classes_terms', 'embedded_embedded', $contextual_filter))) {
      $variables['content']['view_vih_my_classes_terms'] = views_embed_view('vih_my_classes_terms', 'embedded_embedded', $contextual_filter);
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function site_form_user_login_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // Remove form glitter in Firefox (see: https://www.drupal.org/node/2900908)
  if (isset($form['name']['#attributes']['autofocus'])) {
    unset($form['name']['#attributes']['autofocus']);
  }
}

function site_bootstrap_colorize_text_alter(&$texts) {
  $texts['contains'][t('Edit')->render()] = 'info';

  $texts['contains'][t('Remove')->render()] = 'danger';
  $texts['contains'][t('Delete')->render()] = 'danger';

  $texts['contains'][t('Submit')->render()] = 'success';
  $texts['contains'][t('Save')->render()] = 'success';
  $texts['contains'][t('Add')->render()] = 'success';
  $texts['contains'][t('Continue')->render()] = 'success';
}

/**
 * Implements hook_views_pre_render().
 */
function site_views_pre_render(\Drupal\views\ViewExecutable $view) {

  // We need to remove duplicates from vih_long_courses/embed_list_advanced_future view.
  if ($view->id() == "vih_long_courses" && ($view->current_display == 'embed_list_advanced_future' || $view->current_display == 'embed_list_advanced_contain_class')) {
    $node_id = [];
    foreach($view->result as $key => $value){
      if(in_array($value->_entity->id(), $node_id)){
        unset($view->result[$key]);
      } else {
        $node_id[] = $value->_entity->id();
      }
    }
  }
}

/**
 * Implements hook_preprocess_file_link().
 */
function site_preprocess_file_link(&$variables) {

  $file_id = $variables['file']->id();
  $query = \Drupal::entityQuery('media')
      ->condition('field_document.entity.fid', $file_id);
  $media_nids = $query->execute();
  // If we have a Media for this file we use Media name instead of filename on the link.
  if (!empty($media_nids)) {
    $media_nid = array_shift($media_nids);
    $media = \Drupal::entityTypeManager()->getStorage('media')->load($media_nid);
    $link = $variables['link'];
    $link->setText($media->getName());
    $variables['link'] = $link;
  }
}

/**
 * Implements hook_theme().
 */
function site_theme() {
  return [
    'region_sectioned' => [
      'render element' => 'content',
    ],
    'region_sectioned_fluid' => [
      'render element' => 'content',
    ],
    'header_banner' => [
      'render element' => 'banner',
    ],
  ];
}

/**
 * Detects which site are used.
 */
function _detect_site() {
  if (strpos($_SERVER['SERVER_NAME'], 'vies') !== false) {
    return 'vies';
  }

  return 'vih';
}
