<?php

/**
 * @file
 * Functions to support theming in the site theme.
 */

use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_page_attachments_alter().
 */
function site_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function site_preprocess_page(array &$variables) {
  $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term');

  if ($tid) {
    $variables['term'] = \Drupal\taxonomy\Entity\Term::load($tid);
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function site_theme_suggestions_page_alter(
  array &$suggestions,
  array $variables
) {

  $node = \Drupal::request()->attributes->get('node');
  if ($node) {
    if ($node->getType()) {
      $suggestions[] = 'page__' . $node->getType();
    }

    if ($node->hasField('field_page_template')) {
      $custom_page_template = $node->get('field_page_template')->getValue();
      if (isset($custom_page_template[0]['target_id'])) {
        $term = \Drupal\taxonomy\Entity\Term::load($custom_page_template[0]['target_id'])
          ->getname();
        $term = 'page__' . preg_replace("/[^a-zA-Z0-9s]/", "_", strtolower($term));
        $suggestions[] = $term;
      }
    }

    //alternative front page template suggestion, which has higher priority than page__node-type
    $is_front = \Drupal::service('path.matcher')->isFrontPage();
    if ($is_front == TRUE) {
      $suggestions[] = 'page__' . $node->getType() . '__front';
    }
  }

  $term = \Drupal::request()->attributes->get('taxonomy_term');
  if ($term) {
    if ($term->getVocabularyId()) {
      $suggestions[] = 'page__taxonomy__term__' . $term->getVocabularyId();
    }
  }
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function site_theme_suggestions_node_alter(
  array &$suggestions,
  array $variables
) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

function site_theme_suggestions_taxonomy_term_alter(
  &$suggestions,
  $variables,
  $hook
) {
  $suggestions[] = 'taxonomy_term__' . $variables['elements']['#taxonomy_term']->getVocabularyId() . '__' . $variables['elements']['#view_mode'];
  $suggestions[] = 'taxonomy_term__' . $variables['elements']['#view_mode'];
}

function site_theme_suggestions_alter(
  array &$suggestions,
  array $variables,
  $hook
) {

}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function site_preprocess_block(array &$variables) {
  $variables['content']['#attributes']['block'] = $variables['attributes']['id'];
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function site_theme_suggestions_field_alter(
  array &$suggestions,
  array $variables

) {
  $element = $variables['element'];

  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];
  $suggestions[] = 'field__' . $element['#entity_type'] . '__' . $element['#view_mode'] . '__' . $element['#field_name'];
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function site_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function site_theme_suggestions_menu_alter(array &$suggestions, array $variables) {

  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(['block-', '-'], [
      '',
      '_',
    ], $variables['attributes']['block']);

    // menu__MENU_NAME__BLOCK_NAME
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function site_theme_suggestions_block_alter(array &$suggestions, array $variables) {

  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

function site_theme_suggestions_file_link_alter(&$suggestions, $vars, $hook) {

  $suggestions[] = 'file_link__' . 'type__' . 'page';
}

/**
 * Implements hook_preprocess_node().
 */
function site_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
  $node = $variables['node'];

  // Event
  if ($node->getType() == 'event') {
    $variables['content']['can_be_subscribed'] = \Drupal\vih_subscription\Misc\VihSubscriptionUtils::acceptsMoreSubscriptions($node);
    $variables['content']['is_active'] = ($node->field_vih_event_status->value == 'active');
    $variables['content']['is_closed'] = ($node->field_vih_event_status->value == 'closed');
  }

  // Short course
  elseif ($node->getType() == 'vih_short_course') {
    $variables['content']['can_be_subscribed'] = \Drupal\vih_subscription\Misc\VihSubscriptionUtils::acceptsMoreSubscriptions($node);
    $variables['content']['is_active'] = ($node->field_vih_sc_status->value == 'active');
    $variables['content']['is_closed'] = ($node->field_vih_sc_status->value == 'closed');
  }

  // Long course
  elseif ($node->getType() == 'vih_long_cource') {
    $variables['content']['can_be_subscribed'] = \Drupal\vih_subscription\Misc\VihSubscriptionUtils::acceptsMoreSubscriptions($node);
    $variables['content']['is_active'] = ($node->field_vih_course_status->value == 'active');
    $variables['content']['is_closed'] = ($node->field_vih_course_status->value == 'closed');

    //preloading travel classes
    $start_course_date = '';
    $end_course_date = '';
    foreach ($node->field_vih_course_periods->referencedEntities() as $period) {

      if (isset($period->field_vih_cp_start_date) && is_array($period->field_vih_cp_start_date->getValue()[0])) {
        $curr_start_date = array_pop($period->field_vih_cp_start_date->getValue()[0]);
      }

      if (isset($period->field_vih_cp_end_date) && is_array($period->field_vih_cp_end_date->getValue()[0])) {
        $curr_end_date = array_pop($period->field_vih_cp_end_date->getValue()[0]);
      }

      if ($start_course_date) {
        if (strtotime($curr_start_date) < strtotime($start_course_date)) {
          $start_course_date = $curr_start_date;
        }
      }
      else {
        $start_course_date = $curr_start_date;
      }
      if ($end_course_date) {
        if (strtotime($curr_end_date) > strtotime($end_course_date)) {
          $end_course_date = $curr_end_date;
        }
      }
      else {
        $end_course_date = $curr_end_date;
      }

      //only for full display
      if ($variables['view_mode'] == 'full') {
        foreach ($period->field_vih_cp_course_slots->referencedEntities() as $slot) {
          $travel = array_pop($slot->field_vih_cs_travel->getValue()[0]);

          foreach ($slot->field_vih_cs_classes->referencedEntities() as $class) {
            foreach ($class->field_vih_class_class_packages->referencedEntities() as $class_package) {
              if (!isset($variables['content']['classes_packages']) || empty($variables['content']['classes_packages'][$class_package->id()])) {
                $variables['content']['classes_packages'][$class_package->id()] = [
                  'name' => $class_package->getName(),
                  'term' => \Drupal::entityTypeManager()
                    ->getViewBuilder('taxonomy_term')
                    ->view($class_package, 'vih_class_package_accordion'),
                ];
                $variables['content']['classes_packages'][$class_package->id()]['term']['#background_image'] = $class_package->field_vih_cp_image->entity->url();
              }

              $variables['content']['classes_packages'][$class_package->id()]['term']['#slots'][$slot->id()]['name'] = array_pop($slot->field_vih_cs_title->getValue()[0]);
              $variables['content']['classes_packages'][$class_package->id()]['term']['#slots'][$slot->id()]['classes'][$class->id()] = \Drupal::entityTypeManager()
                ->getViewBuilder('taxonomy_term')
                ->view($class, 'list_advanced');
            }

            if ($travel) {
              $variables['content']['travel_classes'][] = \Drupal::entityTypeManager()
                ->getViewBuilder('taxonomy_term')
                ->view($class, 'teaser');
            }
          }
        }
      }
    }

    if ($start_course_date) {
      $variables['content']['course_period_start'] = strtotime($start_course_date);
    }

    if ($end_course_date) {
      $variables['content']['course_period_end'] = strtotime($end_course_date);
    }
  }
}

/*
 * Implements hook_preprocess_paragraph().
 */
function site_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];

  // Default
  if ($variables['view_mode'] === 'default') {
    // Paragraphs which are embedded inside other paragraphs
    $embedded_paragraphs = [
      'vih_single_class_group',
    ];

    // Skewed background
    if (! in_array($paragraph->getType(), $embedded_paragraphs)) {
      $variables['attributes']['class'][] = 'sectioned--skewed';

      // Background image
      if ($paragraph->field_background_image && !$paragraph->field_background_image->isEmpty()) {
        $image_uri = $paragraph->field_background_image->entity->getFileUri();
        $image_style = ImageStyle::load('paragraph_background_image');
        $image_url = $image_style->buildUrl($image_uri);

        $variables['attributes']['class'][] = 'sectioned--skewed--background-image';

        $variables['background_image'] = $image_url;
      }

      // Background color
      elseif ($paragraph->field_background_image && !$paragraph->field_background_color->isEmpty()) {
        $background_color = $paragraph->field_background_color->getValue();

        $variables['attributes']['class'][] = 'sectioned--skewed--background-color';
        $variables['attributes']['class'][] = 'sectioned--skewed--background-color-' . $background_color[0]['value'];
      }

      // Provide a default background color
      else {
        $variables['attributes']['class'][] = 'sectioned--skewed--background-color';
        $variables['attributes']['class'][] = 'sectioned--skewed--background-color-white';
      }
    }
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function site_preprocess_paragraph__list_of_news_teasers(&$variables) {
  $paragraph = $variables['paragraph'];
  $ids = [];

  if ($fields = $paragraph->get('field_tags')->getValue()) {

    foreach($fields as $field) {
      $ids[] = $field['target_id'];
    }
  }
  $contextual_filter = implode('+', $ids);

  $variables['content']['embedded_view'] = views_embed_view('news', 'embedded_teaser_list', $contextual_filter);
}

/**
 * Implements hook_preprocess_hook().
 */
function site_preprocess_paragraph__employee(&$variables) {
  $paragraph = $variables['paragraph'];
  $ids = [];

  if ($fields = $paragraph->get('field_user_type_id')->getValue()) {

    foreach($fields as $field) {
      $ids[] = $field['target_id'];
    }
  }
  $contextual_filter = implode('+', $ids);

  $variables['content']['embedded_view'] = views_embed_view('employees', 'embed_teaser', $contextual_filter);
}

/**
 * Implements hook_preprocess_hook().
 */
function site_preprocess_paragraph__short_course_list_(&$variables) {
  $paragraph = $variables['paragraph'];
  $ids = [];

  if ($fields = $paragraph->get('field_course_id')->getValue()) {

    foreach($fields as $field) {
      $ids[] = $field['target_id'];
    }

    $contextual_filter = implode('+', $ids);

    $variables['content']['embedded_view'] = views_embed_view('short_courses', 'embed_list_advanced', $contextual_filter);
  }

  // Display another display on the view
  else {
    $variables['content']['embedded_view'] = views_embed_view('short_courses', 'embed_list_advanced_future');
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function site_preprocess_paragraph__long_course_list_(&$variables) {
  $paragraph = $variables['paragraph'];
  $ids = [];

  if ($fields = $paragraph->get('field_course_id')->getValue()) {

    foreach($fields as $field) {
      $ids[] = $field['target_id'];
    }

    $contextual_filter = implode('+', $ids);

    $variables['content']['embedded_view'] = views_embed_view('long_courses', 'embed_list_advanced', $contextual_filter);
  }

  // Display another display on the view
  else {
    $variables['content']['embedded_view'] = views_embed_view('long_courses', 'embed_list_advanced_future');
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function site_preprocess_paragraph__event_list(&$variables) {
  $paragraph = $variables['paragraph'];
  $ids = [];

  if ($fields = $paragraph->get('field_event_id')->getValue()) {

    foreach($fields as $field) {
      $ids[] = $field['target_id'];
    }

    $contextual_filter = implode('+', $ids);

    $variables['content']['embedded_view'] = views_embed_view('events', 'embed_list_advanced', $contextual_filter);
  }

  // Display another display on the view
  else {
    $variables['content']['embedded_view'] = views_embed_view('events', 'embed_list_advanced_future');
  }
}

function site_preprocess_paragraph__class_packages(&$variables) {
  $paragraph = $variables['paragraph'];
  $class_tids = [];

  if ($fields = $paragraph->get('field_class_id')->getValue()) {

    foreach($fields as $field) {
      $class_tids[] = $field['target_id'];
    }
  }
  $contextual_filter = implode('+', $class_tids);

  $variables['content']['embedded_view'] = views_embed_view('class_packages', 'embed_teaser', $contextual_filter);
}

function site_preprocess_paragraph__class(&$variables) {
  $classes = $variables['elements']['#paragraph']->getFields()['field_paragraph_class_package']->referencedEntities();
  $paragraph_title = $variables['elements']['#paragraph']->getFields()['field_heading']->value;
  $classes_arr = [];

  foreach ($classes as $class) {
    $classes_arr[] = $class->tid->value;
  }

  $variables['content']['view_header'] = [
    '#markup' => $paragraph_title,
    '#allowed_tags' => ['h2'],
  ];

  $variables['content']['view_output'] = views_embed_view('class_packages_frontpage', 'class_list', implode('+', $classes_arr));
}

function site_preprocess_paragraph__class_package_accordion(&$variables) {

  $class_packages = $variables['elements']['#paragraph']->getFields()['field_paragraph_class_package']->referencedEntities();

  foreach ($class_packages as $key => $class_package) {

    $variables['content']['view_output'][$key]['classes'] = views_embed_view('class_packages_frontpage', 'class_package_list', $class_package->tid->value);
    $variables['content']['view_output'][$key]['package'] = $class_package->name->value;
    //    $class_packages_arr[] = taxonomy_term_view($class_package, 'vih_class_package_accordion');

  }
  //$variables['content']['view_output'] = $class_packages_arr;

}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function site_theme_suggestions_views_view_alter(
  array &$suggestions,
  array $variables
) {

}

/**
 * Implements hook_preprocess_form().
 */
function site_preprocess_form(array &$variables) {
  $form_id = $variables['attributes']['id'];
}

/**
 * Implements hook_preprocess_select().
 */
function site_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function site_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function site_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function site_theme_suggestions_details_alter(
  array &$suggestions,
  array $variables
) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function site_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}

function site_preprocess_links__language_block(&$variables) {
  $variables['links']['en']['link']['#title'] = 'En';
  $variables['links']['da']['link']['#title'] = 'Da';
}

/**
 * Implements template_preprocess_taxonomy_term().
 */
function site_preprocess_taxonomy_term(&$variables) {
  $variables['attributes']['class'][] = $variables['view_mode'];
  $variables['attributes']['class'][] = $variables['term']->getVocabularyId();

  //Get classes from class_package
  //  if($variables['term']->getVocabularyId() == 'vih_class_package'){
  //    $view = \Drupal\views\Views::getView('class_packages_frontpage');
  //    $view->setDisplay('class_package_list');
  //    $view->setArguments(array($variables['term']->id()));
  //    $variables['class_list'] = $view->render();
  //  }
}

/**
 * Implements template_preprocess_user().
 */
function site_preprocess_user(&$variables) {
  $user = $variables['user'];
  $view_mode = $variables['elements']['#view_mode'];
  $variables['attributes']['class'][] = 'user';
  $variables['attributes']['class'][] = $variables['elements']['#view_mode'];

  if ($view_mode === 'full') {
    $ids = [];
    $ids[] = $user->id();

    $contextual_filter = implode('+', $ids);

    $variables['content']['view_my_classes_nodes'] = views_embed_view('my_classes_nodes', 'embedded_embedded', $contextual_filter);
    $variables['content']['view_my_classes_terms'] = views_embed_view('my_classes_terms', 'embedded_embedded', $contextual_filter);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function site_form_user_login_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // Remove form glitter in Firefox (see: https://www.drupal.org/node/2900908)
  if (isset($form['name']['#attributes']['autofocus'])) {
    unset($form['name']['#attributes']['autofocus']);
  }
}

function site_bootstrap_colorize_text_alter(&$texts) {
  $texts['contains'][t('Edit')->render()] = 'info';

  $texts['contains'][t('Remove')->render()] = 'danger';
  $texts['contains'][t('Delete')->render()] = 'danger';

  $texts['contains'][t('Submit')->render()] = 'success';
  $texts['contains'][t('Save')->render()] = 'success';
  $texts['contains'][t('Add')->render()] = 'success';
  $texts['contains'][t('Continue')->render()] = 'success';
}
